initSidebarItems({"fn":[["mount_container_from_config","Container constructor that makes sure the Container instance object is mounted in above static CONTAINER. It replaces any Container instance that was mounted before to CONTAINER with a new one create from the given configuration."],["notify",""]],"struct":[["CONTAINER","This is a global and mutable Container singleton. (Ok, not really. I've made Container::from_config public again so holochain_nodejs is not forced to use Container as a singleton so we don't run into problems with tests affecting each other. The consequence is that Rustc can't help us in enforcing the container to be singleton otherwise. The only point this is important anyway is in the interfaces. That code needs this static variable to be set in order to be able to call ContainerAdmin functions.) In order to call from interface threads Container admin functions that change the config and hence mutate the Container, we need something that owns the Container and is accessible from everywhere (esp. those container interface method closures in interface.rs)."],["Container","Main representation of the container. Holds a `HashMap` of Holochain instances referenced by ID. A primary point in this struct is `load_config(&mut self, config: &Configuration) -> Result<(), String>` which takes a `config::Configuration` struct and tries to instantiate all configured instances. While doing so it has to load DNA files referenced in the configuration. In order to not bind this code to the assumption that there is a filesystem and also enable easier testing, a DnaLoader ()which is a closure that returns a Dna object for a given path string) has to be injected on creation."]],"type":[["DnaLoader",""],["UiDirCopier",""]]});