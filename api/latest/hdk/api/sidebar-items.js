initSidebarItems({"enum":[["BundleOnClose",""],["LinkDirection",""]],"fn":[["call","Call an exposed function from another zome. Arguments for the called function are passed as `JsonString`. Returns the value that's returned by the given function as a json str. # Examples In order to utilize `call`, you must have at least two separate Zomes. Here are two Zome examples, where one performs a `call` into the other."],["check_for_ribosome_error",""],["close_bundle","Not Yet Available"],["commit_entry","Attempts to commit an entry to your local source chain. The entry will have to pass the defined validation rules for that entry type. If the entry type is defined as public, will also publish the entry to the DHT. Returns either an address of the committed entry as a string, or an error. # Examples ```rust # #![feature(try_from)] # extern crate hdk; # extern crate serde_json; # #[macro_use] # extern crate serde_derive; # extern crate holochain_core_types; # #[macro_use] # extern crate holochain_core_types_derive; # use hdk::error::ZomeApiResult; # use holochain_core_types::json::JsonString; # use holochain_core_types::error::HolochainError; # use holochain_core_types::entry::entry_type::AppEntryType; # use holochain_core_types::entry::Entry; # use holochain_core_types::cas::content::Address;"],["debug","Prints a string through the stdout of the running service, and also writes that string to the logger in the execution context # Examples ```rust # #[macro_use] # extern crate hdk; # use hdk::error::ZomeApiResult;"],["entry_address","Reconstructs an address of the given entry data. This is the same value that would be returned if `entry_type_name` and `entry_value` were passed to the commit_entry function and by which it would be retrievable from the DHT using get_entry. This is often used to reconstruct an address of a `base` argument when calling get_links. # Examples ```rust # #![feature(try_from)] # extern crate hdk; # extern crate serde_json; # #[macro_use] # extern crate serde_derive; # extern crate holochain_core_types; # #[macro_use] # extern crate holochain_core_types_derive; # use hdk::error::ZomeApiResult; # use holochain_core_types::json::JsonString; # use holochain_core_types::error::HolochainError; # use holochain_core_types::entry::entry_type::AppEntryType; # use holochain_core_types::entry::AppEntryValue; # use holochain_core_types::entry::Entry; # use holochain_core_types::cas::content::Address; # fn main() {"],["get_entry","Retrieves latest version of an entry from the local chain or the DHT, by looking it up using the specified address. Returns None if no entry exists at the specified address or if the entry's crud-status is not LIVE. # Examples `rust # extern crate hdk; # extern crate holochain_core_types; # use hdk::error::ZomeApiResult; # use holochain_core_types::entry::Entry; # use holochain_core_types::json::JsonString; # use holochain_core_types::cas::content::Address; # fn main() { pub fn handle_get_post(post_address: Address) -> ZomeApiResult<Option<Entry>> { // get_entry returns a Result<Option<T>, ZomeApiError> // where T is the type that you used to commit the entry, in this case a Blog // It's a ZomeApiError if something went wrong (i.e. wrong type in deserialization) // Otherwise its a Some(T) or a None hdk::get_entry(post_address) } # }`"],["get_entry_history","Return a GetEntryHistory filled with all the versions of the entry from the version at the specified address to the latest. Returns None if no entry exists at the specified address."],["get_entry_initial","Returns the Entry at the exact address specified, whatever its crud-status. Returns None if no entry exists at the specified address."],["get_entry_result","Retrieves an entry and its metadata from the local chain or the DHT, by looking it up using the specified address. The data returned is configurable with the GetEntryOptions argument."],["get_links","Consumes two values, the first of which is the address of an entry, `base`, and the second of which is a string, `tag`, used to describe the relationship between the `base` and other entries you wish to lookup. Returns a list of addresses of other entries which matched as being linked by the given `tag`. Links are created in the first place using the Zome API function link_entries. Once you have the addresses, there is a good likelihood that you will wish to call get_entry for each of them. # Examples ```rust # extern crate hdk; # extern crate holochain_core_types; # extern crate holochain_wasm_utils; # use holochain_core_types::json::JsonString; # use holochain_core_types::cas::content::Address; # use hdk::error::ZomeApiResult; # use holochain_wasm_utils::api_serialization::get_links::GetLinksResult;"],["link_entries","Consumes three values, two of which are the addresses of entries, and one of which is a string that defines a relationship between them, called a `tag`. Later, lists of entries can be looked up by using get_links. Entries can only be looked up in the direction from the `base`, which is the first argument, to the `target`. # Examples ```rust # #![feature(try_from)] # extern crate hdk; # extern crate serde_json; # #[macro_use] # extern crate serde_derive; # extern crate holochain_core_types; # #[macro_use] # extern crate holochain_core_types_derive; # use holochain_core_types::json::JsonString; # use holochain_core_types::error::HolochainError; # use holochain_core_types::entry::entry_type::AppEntryType; # use holochain_core_types::entry::Entry; # use holochain_core_types::cas::content::Address; # use hdk::AGENT_ADDRESS; # use hdk::error::ZomeApiResult; # use hdk::holochain_wasm_utils::api_serialization::get_entry::GetEntryOptions; # use hdk::holochain_wasm_utils::api_serialization::get_entry::StatusRequestKind; # fn main() {"],["property","Not Yet Available"],["query","Returns a list of entries from your local source chain, that match a given type. entry_type_name: Specify type of entry to retrieve limit: Max number of entries to retrieve # Examples ```rust # extern crate hdk; # extern crate holochain_core_types; # use hdk::error::ZomeApiResult; # use holochain_core_types::json::JsonString; # use holochain_core_types::cas::content::Address;"],["remove_entry","Commit a DeletionEntry to your local source chain that marks an entry as 'deleted' by setting its status metadata to `Deleted` and adding the DeleteEntry's address in the deleted entry's metadata, which will be used by validation routes."],["send","Not Yet Available"],["sign","Not Yet Available"],["start_bundle","Not Yet Available"],["update_agent","Not Yet Available"],["update_entry","Commit an entry to your local source chain that \"updates\" a previous entry, meaning when getting the previous entry, the updated entry will be returned. `update_entry` sets the previous entry's status metadata to `Modified` and adds the updated entry's address in the previous entry's metadata. The updated entry will hold the previous entry's address in its header, which will be used by validation routes."],["verify_signature","Not Yet Available"]],"struct":[["AGENT_ADDRESS","The hash of your public key. This is your node address on the DHT. It can be used for node-to-node messaging with `send` and `receive` functions."],["AGENT_ID_STR","The identity string used when the chain was first initialized."],["AGENT_INITIAL_HASH","The hash of the first identity entry on your chain (The second entry on your chain). This is your peer's identity on the DHT."],["DNA_HASH","The hash of the DNA the Zome is embedded within. This is often useful as a fixed value that is known by all participants running the DNA."],["DNA_NAME","The `name` property as taken from the DNA."],["EntryValidationArgs",""],["GetEntryMask",""],["LinkValidationArgs",""],["LinkValidationPackageArgs",""]]});