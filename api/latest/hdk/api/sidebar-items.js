initSidebarItems({"enum":[["BundleOnClose",""],["LinkDirection",""]],"fn":[["call","Call an exposed function from another zome. Arguments for the called function are passed as `JsonString`. Returns the value that's returned by the given function as a json str. # Examples In order to utilize `call`, you must have at least two separate Zomes. Here are two Zome examples, where one performs a `call` into the other."],["check_for_ribosome_error",""],["close_bundle","Not Yet Available"],["commit_entry","Attempts to commit an entry to your local source chain. The entry will have to pass the defined validation rules for that entry type. If the entry type is defined as public, will also publish the entry to the DHT. Returns either an address of the committed entry as a string, or an error. # Examples ```rust # #![feature(try_from)] # extern crate hdk; # extern crate serde_json; # #[macro_use] # extern crate serde_derive; # extern crate holochain_core_types; # #[macro_use] # extern crate holochain_core_types_derive; # use holochain_core_types::json::JsonString; # use holochain_core_types::error::HolochainError; # use holochain_core_types::entry::entry_type::EntryType; # use holochain_core_types::entry::Entry; # fn main() {"],["debug","Prints a string through the stdout of the running service, and also writes that string to the logger in the execution context # Examples ```rust # #[macro_use] # extern crate hdk; # extern crate holochain_core_types; # use holochain_core_types::json::JsonString;"],["entry_address","Reconstructs an address of the given entry data. This is the same value that would be returned if `entry_type_name` and `entry_value` were passed to the commit_entry function and by which it would be retrievable from the DHT using get_entry. This is often used to reconstruct an address of a `base` argument when calling get_links. # Examples ```rust # #![feature(try_from)] # extern crate hdk; # extern crate serde_json; # #[macro_use] # extern crate serde_derive; # extern crate holochain_core_types; # #[macro_use] # extern crate holochain_core_types_derive; # use holochain_core_types::json::JsonString; # use holochain_core_types::error::HolochainError; # use holochain_core_types::entry::entry_type::EntryType; # use holochain_core_types::entry::Entry; # fn main() {"],["get_entry","Retrieves an entry from the local chain or the DHT, by looking it up using its address. # Examples `rust # extern crate hdk; # extern crate holochain_core_types; # use holochain_core_types::json::JsonString; # use holochain_core_types::cas::content::Address; # fn main() { pub fn handle_get_post(post_address: Address) -> JsonString { // get_entry returns a Result<Option<T>, ZomeApiError> // where T is the type that you used to commit the entry, in this case a Blog // It's a ZomeApiError if something went wrong (i.e. wrong type in deserialization) // Otherwise its a Some(T) or a None match hdk::get_entry(post_address) { Ok(maybe_post) => maybe_post.and_then(|entry| Some(entry.serialize())).into(), Err(e) => e.into(), } } # }`"],["get_entry_result","Retrieves an entry and meta data from the local chain or the DHT, by looking it up using its address, and a the full options to specify exactly what data to return"],["get_links","Consumes two values, the first of which is the address of an entry, `base`, and the second of which is a string, `tag`, used to describe the relationship between the `base` and other entries you wish to lookup. Returns a list of addresses of other entries which matched as being linked by the given `tag`. Links are created in the first place using the Zome API function link_entries. Once you have the addresses, there is a good likelihood that you will wish to call get_entry for each of them. # Examples ```rust # extern crate hdk; # extern crate holochain_core_types; # use holochain_core_types::json::JsonString; # use holochain_core_types::cas::content::Address;"],["link_entries","Consumes three values, two of which are the addresses of entries, and one of which is a string that defines a relationship between them, called a `tag`. Later, lists of entries can be looked up by using get_links. Entries can only be looked up in the direction from the `base`, which is the first argument, to the `target`. # Examples ```rust # #![feature(try_from)] # extern crate hdk; # extern crate serde_json; # #[macro_use] # extern crate serde_derive; # extern crate holochain_core_types; # #[macro_use] # extern crate holochain_core_types_derive; # use holochain_core_types::json::JsonString; # use holochain_core_types::error::HolochainError; # use holochain_core_types::entry::entry_type::EntryType; # use holochain_core_types::entry::Entry; # use holochain_core_types::cas::content::Address; # use hdk::AGENT_ADDRESS; # fn main() {"],["property","Not Yet Available"],["query","Returns a list of entries from your local source chain, that match a given type. entry_type_name: Specify type of entry to retrieve limit: Max number of entries to retrieve"],["remove_entry","Not Yet Available"],["send","Not Yet Available"],["sign","Not Yet Available"],["start_bundle","Not Yet Available"],["update_agent","Not Yet Available"],["update_entry","Not Yet Available"],["verify_signature","Not Yet Available"]],"struct":[["AGENT_ADDRESS","The hash of your public key. This is your node address on the DHT. It can be used for node-to-node messaging with `send` and `receive` functions."],["AGENT_ID_STR","The identity string used when the chain was first initialized."],["AGENT_INITIAL_HASH","The hash of the first identity entry on your chain (The second entry on your chain). This is your peer's identity on the DHT."],["DNA_HASH","The hash of the DNA the Zome is embedded within. This is often useful as a fixed value that is known by all participants running the DNA."],["DNA_NAME","The `name` property as taken from the DNA."],["EntryStatus",""],["EntryValidationArgs",""],["GetEntryMask",""],["LinkValidationArgs",""],["LinkValidationPackageArgs",""]]});